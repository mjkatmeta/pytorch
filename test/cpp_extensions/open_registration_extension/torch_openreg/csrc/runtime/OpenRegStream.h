#pragma once

#include <include/openreg.h>

#include "OpenRegFunctions.h"

#include <c10/core/DeviceGuard.h>
#include <c10/core/Stream.h>
#include <c10/util/Exception.h>

namespace c10::openreg {

static constexpr int max_compile_time_stream_priorities = 1;

// Value object representing a OpenReg stream.  This is just a wrapper
// around c10::Stream, but it comes with a little extra OpenReg-specific
// functionality (conversion to orStream_t), and a guarantee that
// the wrapped c10::Stream really is a OpenReg stream.
class OpenRegStream {
 public:
  enum Unchecked { UNCHECKED };

  /// Construct a OpenRegStream from a Stream.  This construction is checked,
  /// and will raise an error if the Stream is not, in fact, a OpenReg stream.
  explicit OpenRegStream(Stream stream) : stream_(stream) {
    TORCH_CHECK(stream_.device_type() == DeviceType::PrivateUse1);
  }

  /// Construct a OpenRegStream from a Stream with no error checking.
  /// This constructor uses the "named" constructor idiom, and can
  /// be invoked as: OpenRegStream(OpenRegStream::UNCHECKED, stream)
  explicit OpenRegStream(Unchecked, Stream stream) : stream_(stream) {}

  bool operator==(const OpenRegStream& other) const noexcept {
    return unwrap() == other.unwrap();
  }

  bool operator!=(const OpenRegStream& other) const noexcept {
    return unwrap() != other.unwrap();
  }

  /// Implicit conversion to orStream_t.
  operator orStream_t() const {
    return stream();
  }

  operator Stream() const {
    return unwrap();
  }

  /// Used to avoid baking in device type explicitly to Python-side API.
  DeviceType device_type() const {
    return DeviceType::PrivateUse1;
  }

  /// Get the OpenReg device index that this stream is associated with.
  DeviceIndex device_index() const {
    return stream_.device_index();
  }

  /// Get the full Device that this stream is associated with.  The Device
  /// is guaranteed to be a OpenReg device.
  Device device() const {
    return Device(DeviceType::PrivateUse1, device_index());
  }

  /// Return the stream ID corresponding to this particular stream.
  StreamId id() const {
    return stream_.id();
  }

  bool query() const {
    DeviceGuard guard{stream_.device()};

    if (orStreamQuery(stream()) == orSuccess) {
      return true;
    }

    return false;
  }

  void synchronize() const {
    DeviceGuard guard{stream_.device()};
    orStreamSynchronize(stream());
  }

  int priority() const {
    DeviceGuard guard{stream_.device()};
    int priority = 0;
    orStreamGetPriority(stream(), &priority);
    return priority;
  }

  /// Explicit conversion to orStream_t.
  orStream_t stream() const;

  /// Explicit conversion to Stream.
  Stream unwrap() const {
    return stream_;
  }

  /// Reversibly pack a OpenRegStream into a struct representation.
  /// Previously the stream's data was packed into a single int64_t,
  /// as it was assumed the fields would not require more than
  /// 64 bits of storage in total.
  /// See https://github.com/pytorch/pytorch/issues/75854
  /// for more information regarding newer platforms that may violate
  /// this assumption.
  ///
  /// The OpenRegStream can be unpacked using unpack().
  struct c10::StreamData3 pack3() const {
    return stream_.pack3();
  }

  // Unpack a OpenRegStream from the 3 fields generated by pack().
  static OpenRegStream unpack3(
      StreamId stream_id,
      DeviceIndex device_index,
      DeviceType device_type) {
    return OpenRegStream(Stream::unpack3(stream_id, device_index, device_type));
  }

 private:
  Stream stream_;
};

/**
 * Get a new stream from the OpenReg stream pool.  You can think of this
 * as "creating" a new stream, but no such creation actually happens;
 * instead, streams are preallocated from the pool and returned in a
 * round-robin fashion.
 *
 * You can request a stream from the high priority pool by setting
 * isHighPriority to true, or a stream for a specific device by setting device
 * (defaulting to the current OpenReg stream.)
 */
C10_API OpenRegStream
getStreamFromPool(const bool isHighPriority = false, DeviceIndex device = -1);
// no default priority to disambiguate overloads
C10_API OpenRegStream
getStreamFromPool(const int priority, DeviceIndex device = -1);

/**
 * Get a OpenRegStream from a externally allocated one.
 *
 * This is mainly for interoperability with different libraries where we
 * want to operate on a non-torch allocated stream for data exchange or similar
 * purposes
 */
C10_API OpenRegStream
getStreamFromExternal(orStream_t ext_stream, DeviceIndex device_index);

/**
 * Get the default OpenReg stream, for the passed OpenReg device, or for the
 * current device if no device index is passed.  The default stream is
 * where most computation occurs when you aren't explicitly using
 * streams.
 */
C10_API OpenRegStream getDefaultOpenRegStream(DeviceIndex device_index = -1);

/**
 * Get the current OpenReg stream, for the passed OpenReg device, or for the
 * current device if no device index is passed.  The current OpenReg stream
 * will usually be the default OpenReg stream for the device, but it may
 * be different if someone called 'setCurrentOpenRegStream' or used
 * 'StreamGuard' or 'OpenRegStreamGuard'.
 */
C10_API OpenRegStream getCurrentOpenRegStream(DeviceIndex device_index = -1);

/**
 * Set the current stream on the device of the passed in stream to be
 * the passed in stream.  Yes, you read that right: this function
 * has *nothing* to do with the current device: it toggles the current
 * stream of the device of the passed stream.
 *
 * Confused?  Avoid using this function; prefer using 'OpenRegStreamGuard'
 * instead (which will switch both your current device and current stream in the
 * way you expect, and reset it back to its original state afterwards).
 */
C10_API void setCurrentOpenRegStream(OpenRegStream stream);

C10_API std::ostream& operator<<(std::ostream& stream, const OpenRegStream& s);

} // namespace c10::openreg

namespace std {
template <>
struct hash<c10::openreg::OpenRegStream> {
  size_t operator()(c10::openreg::OpenRegStream s) const noexcept {
    return std::hash<c10::Stream>{}(s.unwrap());
  }
};
} // namespace std
